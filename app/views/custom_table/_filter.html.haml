%div{class: CustomTable.configuration.filter_outer_wrapper_class}

  %div{class: CustomTable.configuration.filter_inner_wrapper_class}

    - url = local_assigns[:url].presence
    - variant = local_assigns[:variant].presence

    - a = {}

    = custom_table_form_for @q, url: url do |f|

      .d-none
        = f.input :s, as: :hidden, input_html: {value: params[:q].try(:[], :s)}

      - fields = custom_table_fields_for(search_model, variant: variant, current_search: params[:q], predefined_fields: local_assigns[:fields]) if local_assigns[:fields].nil?
      - has_unset_fields = false

      - if CustomTable.configuration.show_search_icon
        = custom_table_icon([custom_table_search_icon_class, "pe-0", "d-none", "d-md-inline"])

      - fields.each do |key, defs|

        - next if defs[:search].nil?

        - a[key] = []

        - defs[:search] = [defs[:search]] if !defs[:search].kind_of?(Array)
        - defs[:label] = defs[:search][0][:label] if defs[:label].nil?
        - defs[:label] = search_model.human_attribute_name(key) if defs[:label].nil?

        - defs[:search].each do |field|

          - a[key].push field[:q]
          - label = field[:label] || defs[:label]

          - has_value = params[:q] && field[:q] && params[:q][field[:q].to_s].present?
          - hvh = {wrapper_html: {class: (has_value ? "has-value" : (field[:sm_visible]==true ? "sm-visible" : ""))}}
          - has_unset_fields = true if !has_value

          - if field[:type] == :text

            - ih = {class: "form-control-sm"}
            - ih = ih.merge(defs[:input_html]) if !defs[:input_html].nil?

            = f.input field[:q], input_html: ih, required: false, label: false, placeholder: label, **hvh

          - if field[:type] == :boolean

            = f.input field[:q], as: :boolean, input_html: {}, required: false, label: label, unchecked_value: "", **hvh

          - if field[:type] == :switch

            = f.input field[:q], as: :select, input_html: {:class => "form-select form-select-sm"}, required: false, label: false, :collection => [[t("yes")+" | #{label}", "true"], [t("no")+" | #{label}", "false"]], include_blank: label, **hvh

          - if field[:type] == :select

            - collection = field[:collection]
            - label_method = nil

            - if collection.class.to_s =~ /ActiveRecord_Relation/i
              - collection = collection.accessible_by(current_ability) 
              - label_method = :to_s

            = f.input field[:q], :as => :select, :input_html => {:class => "form-select form-select-sm"}, :required => false, :label => false, :collection => collection, label_method: label_method, include_blank: label, value_method: field[:value_method], **hvh

          - if field[:type] == :grouped_select

            - collection = field[:collection]

            - collection = collection.accessible_by(current_ability) if collection.class.to_s =~ /ActiveRecord_Relation/i

            = f.input field[:q], :as => :grouped_select, :input_html => {:class => "form-select form-select-sm"}, :required => false, :label => false, group_method: field[:group_method], value_method: field[:value_method], :collection => collection, include_blank: label, **hvh

          - if field[:type] == :autocomplete

            - collection = field[:collection]

            - collection = collection.accessible_by(current_ability) if collection.class.to_s =~ /ActiveRecord_Relation/i

            = f.input field[:q], :as => :autocomplete, :input_html => {:class => "input-sm"}, :required => false, :label => false, :collection => collection, url: field[:url], prompt: label, **hvh

          - if field[:type] == :enum

            - collection = field[:collection]
            - collection = [search_model, key.to_s.pluralize] if collection.nil?
            - coll = collection[0].send(collection[1]).keys.map { |w| [(collection[0].method_defined?(:human_enum_name) ? collection[0].human_enum_name(collection[1].to_s.singularize, w) : w), w] }

            = f.input field[:q], :as => :select, :input_html => {:class => "form-select form-select-sm"}, :required => false, :label => false, :collection => coll, include_blank: label, **hvh

          - if field[:type] == :dates
            .col-6{class: (has_value ? "has-value" : "")}
              .input-group.input-group-sm{"data-controller": "dates"}
                = f.input_field field[:q][0], :as => :date_picker, required: false, :label => false, :class => "form-control", data: {"dates-target": "dateFrom"}, :placeholder => label+" ("+t("custom_table.date_from")+")"
                = f.input_field field[:q][1], :as => :date_picker, required: false, :label => false, :class => "form-control", data: {"dates-target": "dateTo"}, :placeholder => label+" ("+t("custom_table.date_to")+")"
                %button.btn.btn-outline-secondary.dropdown-toggle(type="button" data-bs-toggle="dropdown" aria-expanded="false")
                %ul.dropdown-menu.dropdown-menu-end{style: "z-index: 1080"}
                  %button.dropdown-item{type: "button", "data-action": "dates#prevWeek"}= t("analytics.previos_week")
                  %button.dropdown-item{type: "button", "data-action": "dates#prevMonth"}= t("analytics.previos_month")
                  %button.dropdown-item{type: "button", "data-action": "dates#prevYear"}= t("analytics.previos_year")
                  %hr.dropdown-divider
                  %button.dropdown-item{type: "button", "data-action": "dates#clear"}= t("clear")

      .d-inline.text-nowrap
        - if has_unset_fields
          %button.d-md-none.btn.btn-sm.btn-outline-primary{type: "button", onclick: "closest('form').classList.add('show-all'); return false"}= t("custom_table.show_all_filters")
        .btn-group
          = f.button :submit, t("custom_table.search"), name: "", :class => "btn-sm btn-primary"
          - if self.respond_to?(:user_signed_in?) && user_signed_in? && current_user_has_customizable_fields_for?(search_model, variant) && !local_assigns[:hide_customization] && !local_assigns[:fields]# && !(profile_path rescue nil).nil?
            = custom_table_settings_button search_model, variant
          - if params[:q].present? && !params[:q].except(:s).empty?
            = link_to url_for(params.permit!.except(:q)), class: "btn btn-sm btn-outline-danger", title: t("custom_table.clear_search") do
              = custom_table_cancel_icon

      = yield f

