- variant = local_assigns[:variant]
- model_name = item.model_name.singular # Allows to show different class models in one table!
-# = render partial: "custom_tables/table_row", locals: local_assigns.merge(item: item, position: position, fields: fields, fields_totals: fields_totals)
- row_class_helper = local_assigns[:row_class] || "#{model_name}_row_class"
- row_class = [(self.send(row_class_helper, item) rescue "")]
- row_class += ["child-of-#{item.parent_id}", "d-none"] if local_assigns[:tree] && !item.parent_id.nil?
- row_class += ["child-of-#{local_assigns[:grouped_by_id]}", "d-none"] if local_assigns[:grouped_by_id] 

%tr{id: dom_id(item, "row"), :class => row_class}

  - if local_assigns[:tree]
    %td
      - if item.parent_id.nil?
        = tree_opener(item.id, local_assigns[:has_children])

  - if local_assigns[:with_select]
    %td.checkbox-col
      = self.send(local_assigns[:with_select], item, position)

  - if local_assigns[:with_index]
    %td
      = position

  - fields.each do |field, defs|
    - next if defs[:table] == false
    - td_classes = [field.to_s]
    - td_classes += ["text-end"] if defs[:amount]
    - td_classes += ["text-nowrap"] if defs[:nowrap]
    - td_classes += ["amount"] if defs[:amount]

    %td{class: td_classes, id: dom_id(item, field)}
      - v = field_value_for(item, field, definitions: defs, variant: variant)

      - if !local_assigns[:totals].nil? && local_assigns[:totals].has_key?(field) && local_assigns[:totals][field].nil? # Auto-counting
        - fields_totals[field] = 0 if fields_totals[field].nil?
        - fields_totals[field] += raw_field_value_for(item, field, definitions: defs, variant: variant).to_f rescue 0

      - if defs[:editable]

        = editable item, field do
          - if defs[:link_to_show] == true && custom_table_has_show_route?(item) && can?(:show, item)
            -# = link_to v, url_for(controller: controller_name, action: "show", id: item.to_param)
            = link_to v, [namespace, item], data: {turbo: false}
          - else
            = v
      - else
        - if defs[:link_to_show] == true && custom_table_has_show_route?(item) && can?(:show, item)
          -# = link_to v, url_for(controller: controller_name, action: "show", id: item.to_param)
          = link_to v, [namespace, item], data: {turbo: false}
        - else
          = v

  - if !local_assigns[:skip_actions]

    %td.text-end.actions
      - if !local_assigns[:actions].nil?
        = self.send(local_assigns[:actions], item)
      - elsif !variant.nil? && self.class.method_defined?("#{variant}_#{model_name}_custom_table_actions")
        = self.send("#{variant}_#{model_name}_custom_table_actions", item)
      - elsif self.class.method_defined?("#{model_name}_custom_table_actions")
        = self.send("#{model_name}_custom_table_actions", item)
      - if local_assigns[:skip_default_actions].nil?
        - if (!custom_table_has_show_route?(item) || local_assigns[:force_edit_button]) && can?(:update, item)
          = custom_table_edit_button [:edit, namespace, local_assigns[:parent], item], id: "edit_#{item.model_name.singular}_#{item.id}", modal: local_assigns[:modal_edit]
        - if can? :destroy, item
          - if (Rails.application.routes.recognize_path(url_for([namespace, local_assigns[:parent], item]), :method => :delete) rescue false)
            = custom_table_delete_button [namespace, local_assigns[:parent], item], id: "destroy_#{item.model_name.singular}_#{item.id}"
